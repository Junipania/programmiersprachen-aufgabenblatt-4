#ifndef BUW_LIST_HPP
#define BUW_LIST_HPP

#include <cstddef>

//List.hpp

template <typename T>
class List;

template <typename T>
struct ListNode{
    ListNode(): m_value(), m_prev(nullptr), m_next(nullptr){}
    ListNode(T const& v, ListNode* prev, ListNode* next):
        m_value(v), m_prev(prev), m_next(next)
    {}
    T m_value;
    ListNode* m_prev;
    ListNode* m_next;
};

template <typename T>
struct ListIterator{
    friend class List<T>;
    //not implemented yet
private:
    ListNode<T>* m_node = nullptr;
};

template <typename T>
struct ListConstIterator{
    friend class List<T>;
public:
    //not implemented yet
private:
    ListNode<T>* m_node = nullptr;
};

template <typename T>
class List{
    typedef T value_type;
    typedef T* pointer;
    typedef const T* const_pointer;
    typedef T& reference;
    typedef const T& const_reference;
    typedef ListIterator<T> iterator;
    typedef ListConstIterator<T> const_iterator;

    friend class ListIterator<T>;
    friend class ListConstIterator<T>;

public:
    List(): m_first{nullptr}, m_last{nullptr}{}

    bool empty() const{
        return (m_first == m_last);
    }

    std::size_t size() const{
        int i = 0;
        for (pointer = m_first; pointer->next != nullptr; pointer = pointer->next){
            i += 1;
        }
        return i;
        pointer = nullptr;
    }

    void push_front(T const& v){
        ListNode<T>* add = new ListNode<T>(v, nullptr, m_first);
    }

    void push_back(T const& v){
        if (empty() == true){
            if((m_begin = malloc(sizeof(struct ListNode))) == nullptr
            m_first->m_value = v;
            m_first->m_prev = nullptr;
            m_first->m_next = nullptr;
        }
        else{   
            pointer = m_first;
            while(pointer->next != nullptr){
                pointer = pointer->next;
            }
            pointer = pointer->next;
            pointer->m_value = v;
            pointer->next = nullptr;
    }

    void pop_front(){
        if (empty() == false){
            pointer = m_begin->next;
            free(m_first);
            m_first = pointer;
    }

    void pop_back(){
        m_last = nullptr;
        m_last->prev->next = nullptr;
    }

    T getTop(){
        return m_first->m_value;
    }
    //not implemented yet
private:
    std::size_t m_size = 0;
    ListNode<T>* m_first = nullptr;
    ListNode<T>* m_last = nullptr;
};

#endif //#define BUW_LIST_HPP
